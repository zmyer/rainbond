// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app_runtime_sync.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
 app_runtime_sync.proto

It has these top-level messages:
 Ignore
 StatusRequest
 StatusMessage
 DiskMessage
 ErrorMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ignore struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Ignore) Reset()                    { *m = Ignore{} }
func (m *Ignore) String() string            { return proto.CompactTextString(m) }
func (*Ignore) ProtoMessage()               {}
func (*Ignore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ignore) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StatusRequest struct {
	ServiceIds string `protobuf:"bytes,1,opt,name=service_ids,json=serviceIds" json:"service_ids,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusRequest) GetServiceIds() string {
	if m != nil {
		return m.ServiceIds
	}
	return ""
}

type StatusMessage struct {
	Status map[string]string `protobuf:"bytes,1,rep,name=status" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatusMessage) Reset()                    { *m = StatusMessage{} }
func (m *StatusMessage) String() string            { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()               {}
func (*StatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusMessage) GetStatus() map[string]string {
	if m != nil {
		return m.Status
	}
	return nil
}

type DiskMessage struct {
	Disks map[string]float64 `protobuf:"bytes,1,rep,name=disks" json:"disks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *DiskMessage) Reset()                    { *m = DiskMessage{} }
func (m *DiskMessage) String() string            { return proto.CompactTextString(m) }
func (*DiskMessage) ProtoMessage()               {}
func (*DiskMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DiskMessage) GetDisks() map[string]float64 {
	if m != nil {
		return m.Disks
	}
	return nil
}

type ErrorMessage struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorMessage) Reset()                    { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string            { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()               {}
func (*ErrorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ErrorMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Ignore)(nil), "pb.Ignore")
	proto.RegisterType((*StatusRequest)(nil), "pb.StatusRequest")
	proto.RegisterType((*StatusMessage)(nil), "pb.StatusMessage")
	proto.RegisterType((*DiskMessage)(nil), "pb.DiskMessage")
	proto.RegisterType((*ErrorMessage)(nil), "pb.ErrorMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppRuntimeSync service

type AppRuntimeSyncClient interface {
	GetAppStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMessage, error)
	GetAppDisk(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DiskMessage, error)
	SetAppStatus(ctx context.Context, in *StatusMessage, opts ...grpc.CallOption) (*ErrorMessage, error)
	CheckAppStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*ErrorMessage, error)
	IgnoreDeleteEvent(ctx context.Context, in *Ignore, opts ...grpc.CallOption) (*ErrorMessage, error)
	RmIgnoreDeleteEvent(ctx context.Context, in *Ignore, opts ...grpc.CallOption) (*ErrorMessage, error)
}

type appRuntimeSyncClient struct {
	cc *grpc.ClientConn
}

func NewAppRuntimeSyncClient(cc *grpc.ClientConn) AppRuntimeSyncClient {
	return &appRuntimeSyncClient{cc}
}

func (c *appRuntimeSyncClient) GetAppStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := grpc.Invoke(ctx, "/pb.AppRuntimeSync/GetAppStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetAppDisk(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DiskMessage, error) {
	out := new(DiskMessage)
	err := grpc.Invoke(ctx, "/pb.AppRuntimeSync/GetAppDisk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) SetAppStatus(ctx context.Context, in *StatusMessage, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := grpc.Invoke(ctx, "/pb.AppRuntimeSync/SetAppStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) CheckAppStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := grpc.Invoke(ctx, "/pb.AppRuntimeSync/CheckAppStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) IgnoreDeleteEvent(ctx context.Context, in *Ignore, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := grpc.Invoke(ctx, "/pb.AppRuntimeSync/IgnoreDeleteEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) RmIgnoreDeleteEvent(ctx context.Context, in *Ignore, opts ...grpc.CallOption) (*ErrorMessage, error) {
	out := new(ErrorMessage)
	err := grpc.Invoke(ctx, "/pb.AppRuntimeSync/RmIgnoreDeleteEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppRuntimeSync service

type AppRuntimeSyncServer interface {
	GetAppStatus(context.Context, *StatusRequest) (*StatusMessage, error)
	GetAppDisk(context.Context, *StatusRequest) (*DiskMessage, error)
	SetAppStatus(context.Context, *StatusMessage) (*ErrorMessage, error)
	CheckAppStatus(context.Context, *StatusRequest) (*ErrorMessage, error)
	IgnoreDeleteEvent(context.Context, *Ignore) (*ErrorMessage, error)
	RmIgnoreDeleteEvent(context.Context, *Ignore) (*ErrorMessage, error)
}

func RegisterAppRuntimeSyncServer(s *grpc.Server, srv AppRuntimeSyncServer) {
	s.RegisterService(&_AppRuntimeSync_serviceDesc, srv)
}

func _AppRuntimeSync_GetAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppRuntimeSync/GetAppStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetAppStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetAppDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetAppDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppRuntimeSync/GetAppDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetAppDisk(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_SetAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).SetAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppRuntimeSync/SetAppStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).SetAppStatus(ctx, req.(*StatusMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_CheckAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).CheckAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppRuntimeSync/CheckAppStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).CheckAppStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_IgnoreDeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ignore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).IgnoreDeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppRuntimeSync/IgnoreDeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).IgnoreDeleteEvent(ctx, req.(*Ignore))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_RmIgnoreDeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ignore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).RmIgnoreDeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppRuntimeSync/RmIgnoreDeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).RmIgnoreDeleteEvent(ctx, req.(*Ignore))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppRuntimeSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AppRuntimeSync",
	HandlerType: (*AppRuntimeSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppStatus",
			Handler:    _AppRuntimeSync_GetAppStatus_Handler,
		},
		{
			MethodName: "GetAppDisk",
			Handler:    _AppRuntimeSync_GetAppDisk_Handler,
		},
		{
			MethodName: "SetAppStatus",
			Handler:    _AppRuntimeSync_SetAppStatus_Handler,
		},
		{
			MethodName: "CheckAppStatus",
			Handler:    _AppRuntimeSync_CheckAppStatus_Handler,
		},
		{
			MethodName: "IgnoreDeleteEvent",
			Handler:    _AppRuntimeSync_IgnoreDeleteEvent_Handler,
		},
		{
			MethodName: "RmIgnoreDeleteEvent",
			Handler:    _AppRuntimeSync_RmIgnoreDeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_runtime_sync.proto",
}

func init() { proto.RegisterFile("app_runtime_sync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x69, 0x11, 0x8c, 0x53, 0x44, 0x58, 0x8d, 0x69, 0x1a, 0x8d, 0xa4, 0x27, 0x4e, 0x84,
	0x40, 0x50, 0xf4, 0x46, 0x84, 0x18, 0x0e, 0x5e, 0xca, 0x03, 0x90, 0x52, 0x26, 0xd8, 0x94, 0xb6,
	0xeb, 0xee, 0x96, 0xa4, 0x47, 0xdf, 0xd2, 0xc7, 0x31, 0xed, 0x6e, 0x43, 0x55, 0xd4, 0x78, 0x9b,
	0xf9, 0xfb, 0xff, 0xf9, 0x66, 0xa6, 0x0b, 0x97, 0x2e, 0xa5, 0x4b, 0x96, 0x44, 0xc2, 0x0f, 0x71,
	0xc9, 0xd3, 0xc8, 0xeb, 0x51, 0x16, 0x8b, 0x98, 0xe8, 0x74, 0x65, 0x5f, 0x41, 0x7d, 0xbe, 0x89,
	0x62, 0x86, 0x84, 0xc0, 0x51, 0xe4, 0x86, 0x68, 0x6a, 0x1d, 0xad, 0x7b, 0xe2, 0xe4, 0xb5, 0xdd,
	0x87, 0xd3, 0x85, 0x70, 0x45, 0xc2, 0x1d, 0x7c, 0x4d, 0x90, 0x0b, 0x72, 0x03, 0x06, 0x47, 0xb6,
	0xf3, 0x3d, 0x5c, 0xfa, 0x6b, 0xae, 0xbc, 0xa0, 0xa4, 0xf9, 0x9a, 0xdb, 0x6f, 0x5a, 0x11, 0x79,
	0x46, 0xce, 0xdd, 0x0d, 0x92, 0x11, 0xd4, 0x79, 0x2e, 0x98, 0x5a, 0xa7, 0xda, 0x35, 0x06, 0xd7,
	0x3d, 0xba, 0xea, 0x7d, 0xb2, 0xa8, 0x6e, 0x16, 0x09, 0x96, 0x3a, 0xca, 0x6c, 0xdd, 0x83, 0x51,
	0x92, 0x49, 0x0b, 0xaa, 0x01, 0xa6, 0x0a, 0x98, 0x95, 0xe4, 0x02, 0x6a, 0x3b, 0x77, 0x9b, 0xa0,
	0xa9, 0xe7, 0x9a, 0x6c, 0x1e, 0xf4, 0xb1, 0x66, 0xa7, 0x60, 0x4c, 0x7d, 0x1e, 0x14, 0x03, 0xf4,
	0xa1, 0xb6, 0xf6, 0x79, 0x50, 0xf0, 0xad, 0x8c, 0x5f, 0xfa, 0x9e, 0xd7, 0x0a, 0x2e, 0x8d, 0xd6,
	0x18, 0x60, 0x2f, 0xfe, 0x85, 0xd6, 0xca, 0xe8, 0x2e, 0x34, 0x66, 0x8c, 0xc5, 0xac, 0x60, 0x9b,
	0x70, 0x1c, 0xca, 0x52, 0xe5, 0x8b, 0x76, 0xf0, 0xae, 0x43, 0x73, 0x42, 0xa9, 0x23, 0x7f, 0xcb,
	0x22, 0x8d, 0x3c, 0x72, 0x0b, 0x8d, 0x27, 0x14, 0x13, 0x4a, 0xe5, 0xe2, 0xa4, 0xbd, 0xbf, 0x94,
	0xba, 0xbf, 0xd5, 0xfe, 0x76, 0x3c, 0xbb, 0x42, 0x06, 0x00, 0x32, 0x97, 0x0d, 0x7d, 0x28, 0x75,
	0xf6, 0x65, 0x65, 0xbb, 0x42, 0x46, 0xd0, 0x58, 0xfc, 0xc0, 0x52, 0x26, 0xab, 0x95, 0x49, 0xe5,
	0x6d, 0xec, 0x0a, 0xb9, 0x83, 0xe6, 0xe3, 0x0b, 0x7a, 0xc1, 0xaf, 0x43, 0x1e, 0x0a, 0x0e, 0xa1,
	0x2d, 0xdf, 0xd9, 0x14, 0xb7, 0x28, 0x70, 0xb6, 0xc3, 0x48, 0x10, 0xc8, 0x8c, 0x52, 0x3e, 0x18,
	0x1a, 0xc1, 0xb9, 0x13, 0xfe, 0x3b, 0xb6, 0xaa, 0xe7, 0xcf, 0x7b, 0xf8, 0x11, 0x00, 0x00, 0xff,
	0xff, 0x91, 0x0c, 0xaa, 0x0b, 0xf8, 0x02, 0x00, 0x00,
}